#!/usr/bin/env python3

import re
import eyed3
import os
import requests
import argparse
from subprocess import Popen, PIPE



t = 1

assert t > 0, "time to play must be greater than 0"

def download_file(url, local_filename):
    with requests.get(url, stream=True) as r:
        total_length = int(r.headers.get('content-length'))
        try:
            r.raise_for_status()
        except requests.exceptions.HTTPError:
            print(f'ERROR: couldn\'t find URL {url}!')
            exit(102)
        with open(local_filename, 'wb') as f:
            dl = 0
            for chunk in r.iter_content(chunk_size=4096):
                dl += len(chunk)
                bar = round((100 * dl) / total_length) * "="
                print(f"{local_filename} [{bar}{' ' * (100-len(bar))}] {len(bar)}%", end='\r')
                f.write(chunk)
        print()
    return local_filename

def showbar(filename):
    print(f"{filename} [{'='*100}] 100%")





def get(url, t, audio, onlyaudio, v=0):
    print('starting vlc...')
    p = Popen(['vlc', url, '-vv', '--run-time', str(t), 'vlc://quit'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, err = p.communicate(b"", timeout=60)
    rc = p.returncode
    if v > 1:
        print(err)
    # input('press ctrl+c to exit, and enter to continue')

    err = err.decode()
    video_urls = re.findall(r"main stream debug: creating access: (.*)", err)
    if v > 0:
        print(video_urls)
    try: name = re.findall(r"lua stream debug: Name: (.*)", err)[0]
    except IndexError: name = url
    try: album = name.split(' - ')[1]
    except IndexError: album = ""
    try: artist = re.findall(r"lua stream debug: Artist: (.*)", err)[0]
    except IndexError: artist = ""
    try: description = re.findall(r"lua stream debug: Description: ((?:.|\n)*?)Auto-generated by YouTube.", err, re.MULTILINE)
    except IndexError: description = ""

    print('#' * (len(name) + len(artist) + 9))
    print("#", name, 'by', artist, "#")
    print('#' * (len(name) + len(artist) + 9))
    try:
        for video_url in video_urls:
            if re.match(r"https://r\d-.*", video_url):
                url = video_url
                break
        else:
            raise IndexError
    except IndexError:
        print('ERROR: invalid URL')
        exit(101)
    filename = name.replace(' ', '_')
    download_file(url, filename + ".mp4")

    if audio:
        p = Popen(['ffmpeg', '-i', filename + '.mp4', filename + '.mp3'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
        out, err = p.communicate()
        if v > 1:
            print(out)
            print(err)
        showbar(filename + ".mp3")

        art_url = video_urls[-1]

        download_file(art_url, filename + '.jpg')
        audiofile = eyed3.load(filename + '.mp3')
        audiofile.tag.images.set(3, open(filename + '.jpg','rb').read(), 'image/jpeg')
        audiofile.tag.artist = artist
        audiofile.tag.album = album
        audiofile.tag.title = name
        audiofile.tag.publisher_url = url
        audiofile.tag.commercial_url = url
        audiofile.tag.comment = description
        audiofile.tag.save()
        os.remove(filename + '.jpg')
        if onlyaudio:
            os.remove(filename + '.mp4')
    if onlyaudio:
        return filename + '.mp3'
    else:
        return filename + '.mp4'

def main():
    parser = argparse.ArgumentParser(description='download some youtube videos')
    parser.add_argument('urls', type=str, nargs='+', help='a list of URLs and/or youtube video IDs to download')
    parser.add_argument("-a", "--audio", help="also generate .mp3 files along with videos ", action="store_true")
    parser.add_argument("-A", "--audio-only", help="only store .mp3 files, and remove any videos (must be used with -a/--audio)", action="store_true")
    parser.add_argument('-v', '--verbose', help='verbosity of output', action="count", default=0)
    parser.add_argument('-t', '--time', default=1, type=int, help='"preview" player length in seconds while downloading in VLC')
    parser.add_argument('-o', '--open', action="store_true", help="open/play the last video/song when done with everything.")
    args = parser.parse_args()
    if args.audio_only and (args.audio is None or args.audio is False):
        parser.error("-A/--audio-only MUST be used with -a/--audio")

    newurls = []
    for arg in args.urls:
        yt_regex = r"http(?:s?):\/\/(?:www\.)?youtu(?:be\.com\/watch\?v=|\.be\/)([\w\-\_]*)(&(amp;)?[\w\?=]*)?"
        if re.match(yt_regex, arg):
            newurls.append(arg)
        else:
            if re.match(r"[A-Za-z0-9_\-]{11}", arg):
                newurls.append("https://youtube.com/watch?v=" + arg)
            else:
                parser.error(f'"{arg}" is not a valid youtube URL or video ID.')

    print(r'''       _
 _   _| |_
| | | | __|
| |_| | |_
 \__, |\__|
 |___/
''')
    for c, url in enumerate(newurls):
        print(f'({c}/{len(newurls)}) {url}')
        path = get(url, args.time, args.audio, args.audio_only, v=args.verbose)
    if args.open:
        os.system('open "' + path + '"')

if __name__ == "__main__":
    main()
